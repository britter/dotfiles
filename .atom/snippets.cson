# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#

'.source.js':
  'new ES 6 promise':
    'prefix': 'es6p'
    'body': 'new Promise(function(resolve, reject) {\n  $1\n});'

  'relative commonJS imports':
    'prefix': 'rel'
    'body': 'var $1 = require(\'./$1\');'

  'commonJS imports':
    'prefix': 're'
    'body': 'var $1 = require(\'$1\');'

  'new React Component':
    'prefix': 'reactcomp'
    'body': """
    var $1 = React.createClass({
      render: function() {
        return (
          <div>

          </div>
        );
      }
    });
    """

  'check state':
    'prefix': 'checkstate'
    'body': """
      if(this.state.$1 == null) {
        return null;
      }
    """

  'new React module':
    'prefix': 'reactmod'
    'body': """
    var React = require('react');

    var rpt = React.PropTypes;

    var $1 = React.createClass({

      propTypes: {
        // propName: rpt.renderable.isRequired
      },

      render: function() {
        return (
          <div>

          </div>
        );
      }
    });

    module.exports = $1;
    """

  'React PropTypes Helper':
    'prefix': 'reactproptypes'
    'body': """
    /*
    // You can declare that a prop is a specific JS primitive. By default, these
    // are all optional.
    optionalArray: React.PropTypes.array,
    optionalBool: React.PropTypes.bool,
    optionalFunc: React.PropTypes.func,
    optionalNumber: React.PropTypes.number,
    optionalObject: React.PropTypes.object,
    optionalString: React.PropTypes.string,

    // Anything that can be rendered: numbers, strings, components or an array
    // containing these types.
    optionalRenderable: React.PropTypes.renderable,

    // A React component.
    optionalComponent: React.PropTypes.component,

    // You can also declare that a prop is an instance of a class. This uses
    // JS's instanceof operator.
    optionalMessage: React.PropTypes.instanceOf(Message),

    // You can ensure that your prop is limited to specific values by treating
    // it as an enum.
    optionalEnum: React.PropTypes.oneOf(['News', 'Photos']),

    // An object that could be one of many types
    optionalUnion: React.PropTypes.oneOfType([
      React.PropTypes.string,
      React.PropTypes.number,
      React.PropTypes.instanceOf(Message)
    ]),

    // An array of a certain type
    optionalArrayOf: React.PropTypes.arrayOf(React.PropTypes.number),

    // An object with property values of a certain type
    optionalObjectOf: React.PropTypes.objectOf(React.PropTypes.number),

    // An object taking on a particular shape
    optionalObjectWithShape: React.PropTypes.shape({
      color: React.PropTypes.string,
      fontSize: React.PropTypes.number
    }),

    // You can chain any of the above with `isRequired` to make sure a warning
    // is shown if the prop isn't provided.
    requiredFunc: React.PropTypes.func.isRequired,

    // A value of any data type
    requiredAny: React.PropTypes.any.isRequired,
    */
    """

'.source.ini':
  'sample editorconfig file':
    'prefix': 'editorconfig'
    'body': """
      root = true

      [*]
      end_of_line = lf
      insert_final_newline = true
      indent_style = space
      indent_size = 2
      trim_trailing_whitespace = true
      charset = utf-8
   """
