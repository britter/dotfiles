## Open man page as PDF
pman () { man -t "${1}" | open -f -a "Preview"; }

# traverse the directory hierarchy up until finds a gradlew file and executes
# it with arguments supplied by user
gdw() {
  _GDW_DIR=$(pwd)
  while [ "$_GDW_DIR" != "/" ]; do
    if [ -f "$_GDW_DIR/gradlew" ]; then
      _GDW_EXEC="$_GDW_DIR/gradlew --stacktrace"

      if [ -f $_GDW_DIR/init.gradle ]; then
        _GDW_EXEC="$_GDW_EXEC -I $_GDW_DIR/init.gradle"
      fi

      $_GDW_EXEC "$@"
      return $?
      break;
    fi

    _GDW_DIR=$(dirname $_GDW_DIR)
    echo $_GDW_DIR
  done
}

## initialize maven wrapper
mvnwinit() {
  if [ $# -eq 0 ]
  then
    mvn -N io.takari:maven:wrapper
  else
    mvn -N io.takari:maven:wrapper -Dmaven=$1
  fi
}

## Resets SVN working copy, reverting all changed files and removing all unversioned files. Usage: svn reset
svn() {
  if [[ $@ == "reset" ]];
    then
      command svn revert --recursive . && svn status | grep ^\? | cut -c9- | xargs  rm -r;
    else command svn "$@";
  fi;
}

## Show the location of a linked program
ref() { readlink $(which "${1}"); }

## Switching between different Java versions
usejava() {
  if [ $# -eq 0 ]
    then
      echo "JAVA_HOME: $JAVA_HOME"
  else
    export JAVA_HOME=`/usr/libexec/java_home -v 1.$1`
    echo "new JAVA_HOME: $JAVA_HOME"
  fi
}

## Output MANIFEST for the given jar
manifest() { unzip -q -c "${1}" META-INF/MANIFEST.MF; }

## Output LINCENSE file for the given jar
license() { unzip -q -c "${1}" META-INF/LICENSE.txt; }

## Get svn keywords
gkw() { svn pg svn:keywords ${1}; }

## Set svn keywords
skw() { svn ps svn:keywords "Date Author Id Revision HeadURL" ${1}; }

## auto detect git ignore
## requires bash 4!
gitignore() {
  declare -A files
  files["pom.xml"]=maven
  files["build.gradle"]=gradle
  files["build.sbt"]=sbt

  for file in "${!files[@]}"
  do
    if [[ -f $file ]]
    then
      echo "Adding $file files to .gitignore."
      gibo ${files[$file]} >> .gitignore
    fi
  done
}
