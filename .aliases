# Easier navigation: .., ..., ...., .....
alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias .....="cd ../../../.."

# redo previous command with sudo
alias fuck='sudo $(history -p \!\!)'

## Open man page as PDF
pman () { man -t "${1}" | open -f -a "Preview"; }

## Bash completion
complete -o default -o nospace -W "$(/usr/bin/env ruby -ne 'puts $_.split(/[,\s]+/)[1..-1].reject{|host| host.match(/\*|\?/)} if $_.match(/^\s*Host\s+/);' < $HOME/.ssh/config)" scp sftp ssh

## Remove directory
alias rd="rm -rf"

## Directory listings
alias ll="ls -la"

## Gralde
alias gdl="gradle"

gdw() {
    _GDW_DIR=$(pwd)

    while [ "$_GDW_DIR" != "/" ]; do
        _GDW_PATH="$_GDW_DIR/gradlew"
        if [ -f $_GDW_PATH ]; then
            $_GDW_PATH "$@"
            break;
        fi

        _GDW_DIR=$(dirname $_GDW_DIR)
    done
}

## Resets SVN working copy, reverting all changed files and removing all unversioned files. Usage: svn reset
svn() {
  if [[ $@ == "reset" ]];
    then
      command svn revert --recursive . && svn status | grep ^\? | cut -c9- | xargs  rm -r;
    else command svn "$@";
  fi;
}

## Show the location of a linked program
ref() { readlink $(which "${1}"); }

## Switching between different Java versions
usejava() {
  if [ $# -eq 0 ]
    then
      echo "JAVA_HOME: $JAVA_HOME"
  else
    export JAVA_HOME=`/usr/libexec/java_home -v 1.$1`
    echo "new JAVA_HOME: $JAVA_HOME"
  fi
}

## Output MANIFEST for the given jar
manifest() { unzip -q -c "${1}" META-INF/MANIFEST.MF; }

## Output LINCENSE file for the given jar
license() { unzip -q -c "${1}" META-INF/LICENSE.txt; }


## Get svn keywords
gkw() { svn pg svn:keywords ${1}; }

## Set svn keywords
skw() { svn ps svn:keywords "Date Author Id Revision HeadURL" ${1}; }

## Start a simple HTTP Server
alias server="open http://localhost:8000/ && python -m SimpleHTTPServer"

## Init rbenv
eval "$(rbenv init -)"
